// RETURN:
	// Devuelve el número de caracteres impresos, sin incluir el \0 usado para
	// terminar un string
	// En caso de ocurrir un error, devuelve -1

	// CONVERSIONES:
	// c -> El entero pasado como argumento se convierte a unsigned char.
	// s -> Se escribe el string pasado como argumento. Se escriben los caracteres
	// 		del array sin añadir el carácter NULL; si se especifica una precisión,
	//		no se escriben más de los caracteres especificados. Si se da una
	//		precisión, debe estar presente el \0; si la precisión no se especifica,
	//		o es mayor que el tamaño del array, el array debe contener el \0.
	// p -> Se pinta el argumento (puntero void *) en hexadecimal.
	// d, i -> Convierte un argumento int (o una variante apropiada) a un decimal
	// 		con signo.
	// u -> Convierte un argumento int (o variante apropiada) a decimal sin signo.
	// x, X -> Convierte un argumento int (o variante apropiada) a notación
	// 		hexadecimal sin signo. "abcdef" se usan para conversiones 'x'; "ABCDEF"
	// 		para conversiones 'X'.
	// diuxX -> La precisión, si la hay, da el número mínimo de dígitos que deben
	// 			aparecer; si el valor convertido requiere menos dígitos, se rellena
	// 			a la izquierda con ceros.
	// % -> Se escribe un '%'. No se convierte ningún argumento. La especificación
	// 		completa de la conversión es '%%'.

	// FLAGS:
	// - -> El valor convertido se deja ajustado en el límite de campo. Excepto para
	//		las conversiones de 'n', el valor convertido se rellena por la dcha con
	//		espacios en blanco, en lugar de espacios en blanco o ceros a la izq. Un
	//		'-' anula a '0' si se dan ambos flags.
	// 0 -> Cero relleno. Para todas las conversiones exceto 'n', el valor convertido
	//		se rellena a la izq con ceros en lugar de espacios en blanco. Si la
	//		precisión se da con una conversión numérica (d, i, o, u, i, x, y X), el
	//		flag '0' se ignora.
	// . -> Lo que viene después, es la precisión.
	// * -> El ancho del campo o precisión, o ambos, pueden estar indicados por un
	//		asterisco o un asterisco seguido de uno o más dígitos decimales y un '$'
	//		en lugar de una cadena de dígitos. En este caso, un argumento int sustituye
	//		el ancho del campo o precisión. Un ancho de campo negativo se trata como
	//		un indicador de ajuste a la izq seguido de un ancho de campo positivo; una
	//		precisión negativa se trata como si faltara.
